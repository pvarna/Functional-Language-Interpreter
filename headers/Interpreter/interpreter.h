/** @file parser.h
 *  @brief A class for interpreting the AST generated by the Parser using the Visitor pattern
 *  
 *  @author Peter Kolev
 */

#pragma once

#include "ASTNode.h"
#include "ASTListNode.h"
#include "ASTUnaryFunctionNode.h"
#include "ASTBinaryFunctionNode.h"
#include "ASTTernaryFunctionNode.h"
#include "ASTN_aryFunctionNode.h"
#include "ASTUserFunctionNode.h"
#include "literal.h"
#include <unordered_map>
#include <unordered_set>
#include <stack>
#include <list>

/**
 * @class Interpreter
 */
class Interpreter
{
private:
    static const std::unordered_set<std::string> SAVED_FUNCTIONS;

    std::stack<const Literal*> visitedLiterals; //!< stores the already visited literals
    std::vector<const Literal*> userArguments; //!< stores the user arguments for the user-defined functions
    std::unordered_map<std::string, const ASTNode*> userFunctions; //!< stores the user-defined functions and their definitions
    int offset; //!< helper integer for the recursive function calls
    
    //! Helper function for deallocating the allocated memory for the literals
    void deallocate();

    //! Functions without arguments
    void read();

    //! Functions with one argument
    void sqrt(const ASTUnaryFunctionNode* node);
    void head(const ASTUnaryFunctionNode* node);
    void tail(const ASTUnaryFunctionNode* node);
    void length(const ASTUnaryFunctionNode* node);
    void list(const ASTUnaryFunctionNode* node);
    void write(const ASTUnaryFunctionNode* node);
    void toInt(const ASTUnaryFunctionNode* node);

    //! Functions with two arguments
    void concat(const ASTBinaryFunctionNode* node);
    void eq(const ASTBinaryFunctionNode* node);
    void le(const ASTBinaryFunctionNode* node);
    void nand(const ASTBinaryFunctionNode* node);
    void list(const ASTBinaryFunctionNode* node);
    void binaryArithmethic(const ASTBinaryFunctionNode* node, const std::string& functionName);

    //! Functions with three arguments
    void list(const ASTTernaryFunctionNode* node);
    void visitIf(const ASTTernaryFunctionNode* node);


    //! FUNCTIONS FOR IMPLEMENTING THE VISITOR PATTERN

    //! Function that determines which node should be visited at the moment
    void visit(const ASTNode* node);

    void visitWholeNumber(const ASTNode* node);
    void visitFractionalNumber(const ASTNode* node);
    void visitUserDefinedList(const ASTListNode* node);
    void visitFunction(const ASTNode* node);
    void visitFunctionWithoutArguments(const ASTNode* node);
    void visitUnaryFunction(const ASTUnaryFunctionNode* node);
    void visitBinaryFunction(const ASTBinaryFunctionNode* node);
    void visitTernaryFunction(const ASTTernaryFunctionNode* node);
    void visitN_aryFunction(const ASTN_aryFunctionNode* node);
    void visitUserFunction(const ASTUserFunctionNode* node);
    void visitArgument(const ASTNode* node);

public:

    //! Default constructor
    Interpreter();

    //! Deleted copy constructor
    Interpreter(const Interpreter& other) = delete;
    
    //! Deleted copy assignment operator
    Interpreter& operator = (const Interpreter& other) = delete;
    
    //! Destructor
    ~Interpreter();

    //! Main function for interpreting the AST
    std::string interpret(const ASTNode* astTree);
};